x <- 1
x
library(dplyr)
library(ggplot2)
library(ggplot)
library(ggplot2)
library(ggplot2)
library(ggplot2)
library(ggplot2)
library(ggplot2)
require(raster)
require(xts)
setOldClass("xts") #make S3 object accessible to S4 objects
setClass("TimeRaster",
representation(ts="xts"),
contains="RasterStack",
validity=function(object) {
if (nlayers(object)!=length(object@ts))
"Number of layers not equal length of timeseries"
else
TRUE
}
)
install.packages("raster")
require(raster)
require(raster)
require(xts)
setOldClass("xts") #make S3 object accessible to S4 objects
setClass("TimeRaster",
representation(ts="xts"),
contains="RasterStack",
validity=function(object) {
if (nlayers(object)!=length(object@ts))
"Number of layers not equal length of timeseries"
else
TRUE
}
)
setMethod(
f="show",
signature="TimeRaster",
definition=function(object) {
callNextMethod()
cat("Time dimension has",toString(length(object@ts)),"time periods\n")
show(head(index(object@ts)))
}
)
#convenience constructor
TimeRaster<-function(rast,datelist) {
if (class(rast)!="RasterStack" && class(rast)!="RasterBrick")
#assume it is a list of files and see how that works out
rast=stack(rast)
if (!("xts" %in% class(datelist)))  #if an array of dates
datelist=xts(1:length(datelist),datelist)
datelist[]=1:length(datelist) #override content to be 1..n
index(datelist)=trunc(index(datelist))+0.4 #midnight sometimes is previous day so put midday but still rounds down
return(new("TimeRaster",rast,ts=datelist))
}
setMethod(
f="[[",
signature="TimeRaster",
definition=function(x,i,...) {
if (is.numeric(i)) {return(callNextMethod(x,i,...))}
if (is.character(i)) {
args=parseit(i)
return(doit(x,args))
}# end if is.character #process
} #end [[ function method
)
setGeneric("getTS",function(object,...){standardGeneric("getTS")})
setMethod(f="getTS",signature="TimeRaster",
definition<-function(object,x,y) {
row=rowFromY(object,y)
col=colFromX(object,x)
m=getValues(object,row)[col,]
return(xts(as.vector(m),index(object@ts)))
}
)
setMethod(
f="cellStats",
signature=(x="TimeRaster"),
definition=function(x,stat='mean',na.rm=TRUE,asSample=TRUE, ...) {
return(xts(callNextMethod(x,stat,na.rm,asSample),index(x@ts)))
}
)
# doit() turn structured description into which bands to operate on how
#
doit<-function(obj,args) {  #have arguments parsed
print(args)
#first do selection/subsetting
seltext=""
if (!is.na(args$startdate))
seltext=args$startdate
else
seltext=""
if (!is.na(args$enddate)) {
if (seltext!="") {
seltext<-paste(seltext,"/",args$enddate,sep="")
}
else {
seltext=args$enddate
}
}
outobj=obj
if (seltext!="") {
newts=outobj@ts[seltext]
if (length(newts)==0)
stop("TimeRaster subscripted to zero layers")
outobj=outobj[[as.numeric(newts)]]   ####
newts[]=1:length(newts)
outobj@ts=newts
names(outobj)<-index(outobj@ts)
}
#OK subscripted - now do aggregation if any
#args$  agglevel  aggfunc aggkeepna
if (!is.na(args$agglevel)) {
if (args$aggup) {
ep=endpoints(outobj@ts,tolower(args$agglevel))
idx=floor(approx(ep+1,1:length(ep),1:length(outobj@ts))$y)
oldts=outobj@ts
outobj=stack(stackApply(outobj,idx,tolower(args$aggfunc),na.rm=!args$aggkeepna))   ####
newts=oldts[ep[-length(ep)]+1]
newts[]=1:length(newts)
outobj=new("TimeRaster",outobj,ts=newts)
#DOITHERE - set raster layer names
names(outobj)<-index(outobj@ts)
}
else
stop("Error DOWNTO not implemented yet")
}
#OK now do periodicity
# args$ acrosslevel   acrossfunc  acrosskeepna
if (!is.na(args$acrosslevel)) {
curperiod=periodicity(outobj@ts)$frequency/(24*60*60)
if (args$acrosslevel=="MONTH") {
if (curperiod!=1)
stop("Invalid across month")
idx=.indexmday(outobj@ts)
}
else if (args$acrosslevel=="YEAR") {
if (curperiod==31) #monthly data
idx=.indexmon(outobj@ts)+1
else if (curperiod==7) {#weeklydata
idx=.indexweek(outobj@ts)
idx=idx-min(idx)+1 #week is relative to epoch
}
else if (curperiod==1) #daily
idx=.indexyday(outobj@ts)+1
else
stop("invalid across year")
}
else
stop(paste("Inavlid across level:",args$acrosslevel))
#browser() #some errors in index/newdates
oldts=outobj@ts
outobj=stack(stackApply(outobj,idx,tolower(args$acrossfunc),na.rm=!args$acrosskeepna))  ####
if (curperiod==31)
newdates=seq(as.Date("2000-1-1")+0.4,by='month',length.out=12)
else
newdates=as.Date("2000-1-1")+0.4+unique(idx-1)*curperiod
newts=xts(1:length(newdates),newdates)
outobj=new("TimeRaster",outobj,ts=newts)
#DOITHERE - set raster layer names
names(outobj)<-index(outobj@ts)
} #end if !is.na(args$acrosslevel) - i.e. do ACROSS functionality
#OK now do lags??
return(outobj)
}
#
# parseit()  turns a text string into a structured description of what to do
#
parseit<-function(textsub) {
#show is on - need to parse this
textsub=gsub("^ *|(?<= ) | *$", "", textsub, perl=T) #remove double spaces
#cat("Will parse '",textsub,"'\n")
toks=strsplit(textsub," ")[[1]]
startdate<-enddate<-aggup<-agglevel<-aggfunc<-aggkeepna<-acrosslevel<-acrossfunc<-acrosskeepna<-NA
while (length(toks)>0) {
thetok=toupper(toks[[1]])
#cat("thetok=",thetok,"\n")
#DOIT - allow no start date or enddate
if (grepl("^[0-9]{4}",thetok)) {
#DOITHERE - ALLOW no start or end date with TO
if (is.na(startdate)) {
#cat("doing startdate\n")
startdate=thetok
if (length(toks)>2 && toupper(toks[[2]])=="TO" ) {
if (!grepl("^[0-9]{4}",toks[[3]]))
stop(cat("Syntax error: invalid 2nd date",toks[[3]]))
enddate=toks[[3]]
print(toks)
toks=toks[-1]
toks=toks[-1] #eat start date & TO token
} #end process enddate
} #end working on date
else {
stop("Syntax error: more than one date")
}
}#end dates
else if (grepl("UPTO|DOWNTO",thetok)) {
#cat("length=",length(toks),"tok[2]=",toks[[2]],"\n")
if (length(toks)>1 && grepl("WEEKS|MONTHS|QUARTERS|YEARS",toupper(toks[[2]]))) {
if  (thetok=="UPTO")
aggup=TRUE
else
aggup=FALSE
agglevel=toks[[2]]
aggfunc="SUM"
aggkeepna=FALSE
if (length(toks)>3 && toks[[3]]=="BY") {
if (grepl("SUM|MEAN|MIN|MAX|VAR|STD|COUNT|MEDIAN",toupper(toks[[4]]))) {
aggfunc=toks[[4]]
toks=toks[-1] #eat two more to account for BY SUM
toks=toks[-1]
cat("About check KEEPNA: t1=",toks[[1]],"t2=",toks[[2]],"t3=",toks[[3]],"\n")
if (length(toks)>2 && toks[[3]]=="KEEPNA") {
cat("Doing KEEPNA TRUE\n")
aggkeepna=TRUE
toks=toks[-1]
}
}
else
stop("Syntax error near aggregation BY")
} #end if BY
toks=toks[-1]
}#end if aggto
else {
stop(cat("Syntax error on aggregation - valid periods are WEEKS, MONTHS, QUARTERS, YEARS"))
}
}
else if (grepl("ACROSS",thetok)) {
if (length(toks)>1 && grepl("YEAR|MONTH",toks[[2]])) {
acrosslevel=toks[[2]]
acrossfunc="SUM"
acrosskeepna=FALSE
if (length(toks)>3 && toks[[3]]=="BY") {
if (grepl("SUM|MEAN|MIN|MAX|VAR|STD|COUNT|MEDIAN",toupper(toks[[4]]))) {
acrossfunc=toks[[4]]
toks=toks[-1] #eat two more to account for BY SUM
toks=toks[-1]
if (length(toks)>2 && toks[[3]]=="KEEPNA") {
acrosskeepna=TRUE
toks=toks[-1]
}
}
else
stop("Syntax error near across BY")
} #end if BY
toks=toks[-1]
}
else
stop("Syntax error near ACROSS")
}
else {
stop(cat("Syntax error: near",thetok))
}
toks=toks[-1] #eat the token
} #end while
args=list(startdate=startdate,enddate=enddate,aggup=aggup,agglevel=agglevel,aggfunc=aggfunc,aggkeepna=aggkeepna,acrosslevel=acrosslevel,acrossfunc=acrossfunc,acrosskeepna=acrosskeepna)
return(args)
}
#sample code to load 2014 stack
files <- list.files(path= "/data/prismrain2014", pattern=".tif$", all.files=T, full.names=T)
rf=stack(files)
ts=xts(1:365,as.Date("2014-01-01")+0:364)
files
#sample code to load 2014 stack
files <- list.files(path= "/data/prismrain2014", pattern=".tif$", all.files=T, full.names=T)
rf=stack(files)
library(ggplot2)
library(dplyr)
library(tinytex)
install.packages(c("askpass", "backports", "BH", "boot", "broom", "callr", "caret", "class", "cli", "clipr", "cluster", "codetools", "colorspace", "crayon", "curl", "data.table", "DBI", "dbplyr", "digest", "dplyr", "ellipsis", "evaluate", "fansi", "forcats", "foreach", "formatR", "fs", "generics", "ggplot2", "glmnet", "glue", "gower", "haven", "hexbin", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "ipred", "IRdisplay", "IRkernel", "iterators", "jsonlite", "KernSmooth", "knitr", "labeling", "later", "lattice", "lava", "lubridate", "magrittr", "markdown", "MASS", "Matrix", "mgcv", "mime", "ModelMetrics", "modelr", "nlme", "nnet", "numDeriv", "openssl", "pbdZMQ", "pillar", "pkgconfig", "plyr", "prettyunits", "processx", "prodlim", "progress", "promises", "ps", "purrr", "quantmod", "R6", "raster", "Rcpp", "readr", "recipes", "repr", "reprex", "reshape2", "rlang", "rstudioapi", "rvest", "scales", "selectr", "shiny", "sp", "spatial", "SQUAREM", "stringi", "survival", "sys", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "TTR", "utf8", "uuid", "viridisLite", "whisker", "withr", "xfun", "xml2", "xts", "yaml", "zoo"))
update.packages("tinytex")
library(tidyverse)
library(tinytex)
library(ggplot2)
library(ggplot2)
library(ggplot2)
install.packages("stringi")
library(stringi)
# set my working directory
#setwd("~/Documents/GitHub/Theme3_LabNotebook/R_scripts")
#load the reticulate package
library(reticulate)
# activate my conda python virtual environment
use_condaenv(condaenv = "myCondaEnvironment",
conda = "/opt/anaconda3/envs/myCondaEnvironment/bin/python")
reticulate::repl_python()
#import numpy as np
# set my working directory
#setwd("~/Documents/GitHub/Theme3_LabNotebook/R_scripts")
#load the reticulate package
library(reticulate)
# activate my conda python virtual environment
use_condaenv(condaenv = "myCondaEnvironment",
conda = "/opt/anaconda3/envs/myCondaEnvironment/bin/python")
reticulate::repl_python()
#import numpy as np
n
reticulate::repl_python()
#import numpy as np
reticulate::repl_python()
#import numpy as np
# set my working directory
#setwd("~/Documents/GitHub/Theme3_LabNotebook/R_scripts")
#load the reticulate package
library(reticulate)
# activate my conda python virtual environment
use_condaenv(condaenv = "myCondaEnvironment",
conda = "/opt/anaconda3/envs/myCondaEnvironment/bin/python")
reticulate::repl_python()
#import numpy as np
# set my working directory
#setwd("~/Documents/GitHub/Theme3_LabNotebook/R_scripts")
#load the reticulate package
library(reticulate)
# activate my conda python virtual environment
use_condaenv(condaenv = "myCondaEnvironment",
conda = "/opt/anaconda3/envs/myCondaEnvironment/bin/python")
# set my working directory
#setwd("~/Documents/GitHub/Theme3_LabNotebook/R_scripts")
#load the reticulate package
library(reticulate)
# activate my conda python virtual environment
use_condaenv(condaenv = "myCondaEnvironment",
conda = "/opt/anaconda3/envs/myCondaEnvironment/bin/python",
required = TRUE)
conda_list()
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
conda_list()
conda_list()[[1]][1]
conda_list()[[2]][1]
conda_list()[[2]][2]
conda_list()[[1]][2]
conda_list()
#Using it
conda_list()[[1]][2] %>%
use_condaenv(required = TRUE)
#import platform
print(platform.python_version())
# set my working directory
#setwd("~/Documents/GitHub/Theme3_LabNotebook/R_scripts")
#load the reticulate package
library(reticulate)
library(tidyverse)
conda_list()
#Using it
conda_list()[[1]][2] %>%
use_condaenv(required = TRUE)
# activate my conda python virtual environment
#use_condaenv(condaenv = "myCondaEnvironment",
#            conda = "/opt/anaconda3/envs/myCondaEnvironment/bin/python",
#            required = TRUE)
reticulate::repl_python()
#import numpy as np
# set my working directory
#setwd("~/Documents/GitHub/Theme3_LabNotebook/R_scripts")
#load the reticulate package
library(reticulate)
library(tidyverse)
conda_list()
#Using it
conda_list()[[1]][4] %>%
use_condaenv(required = TRUE)
# activate my conda python virtual environment
#use_condaenv(condaenv = "myCondaEnvironment",
#            conda = "/opt/anaconda3/envs/myCondaEnvironment/bin/python",
#            required = TRUE)
reticulate::repl_python()
#import numpy as np
# set my working directory
#setwd("~/Documents/GitHub/Theme3_LabNotebook/R_scripts")
#load the reticulate package
library(reticulate)
library(tidyverse)
conda_list()
#Using it
conda_list()[[1]][4] %>%
use_condaenv(required = TRUE)
# activate my conda python virtual environment
#use_condaenv(condaenv = "myCondaEnvironment",
#            conda = "/opt/anaconda3/envs/myCondaEnvironment/bin/python",
#            required = TRUE)
reticulate::repl_python()
#import numpy as np
#load the reticulate package
library(reticulate)
# create a new environment
conda_create("reticEnv")
use_condaenv("reticEnv", required = T)
# set my working directory
#setwd("~/Documents/GitHub/Theme3_LabNotebook/R_scripts")
#load the reticulate package
library(reticulate)
# create a new environment
#conda_create("reticEnv")
use_condaenv("reticEnv", required = T)
reticulate::repl_python()
#import numpy as np
use_virtualenv("reticEnv", required = T)
conda_list()
use_virtualenv("anaconda3", required = T)
use_condaenv("opt/anaconda3/envs/myCondaEnvironment", required = T)
list_conda()
conda_list()
# set my working directory
#setwd("~/Documents/GitHub/Theme3_LabNotebook/R_scripts")
#load the reticulate package
library(reticulate)
use_condaenv("/opt/anaconda3/bin/python", required = T)
# set my working directory
#setwd("~/Documents/GitHub/Theme3_LabNotebook/R_scripts")
#load the reticulate package
library(reticulate)
use_condaenv("/opt/homebrew/anaconda3/envs/reticEnv/bin/python", required = T)
# set my working directory
#setwd("~/Documents/GitHub/Theme3_LabNotebook/R_scripts")
#load the reticulate package
library(reticulate)
use_python_version(3.9)
# set my working directory
#setwd("~/Documents/GitHub/Theme3_LabNotebook/R_scripts")
#load the reticulate package
library(reticulate)
use_python_version(3.8)
# set my working directory
#setwd("~/Documents/GitHub/Theme3_LabNotebook/R_scripts")
#load the reticulate package
library(reticulate)
use_condaenv("/opt/homebrew/anaconda3/envs/reticEnv/bin/python", required = T)
# set my working directory
#setwd("~/Documents/GitHub/Theme3_LabNotebook/R_scripts")
#load the reticulate package
library(reticulate)
use_condaenv("/opt/homebrew/anaconda3/envs/myCondaEnvironment/bin/python", required = T)
# set my working directory
#setwd("~/Documents/GitHub/Theme3_LabNotebook/R_scripts")
#load the reticulate package
library(reticulate)
use_condaenv("myCondaEnvironment", required = T)
use_condaenv(condaenv="myCondaEnvironment", required = T)
# set my working directory
#setwd("~/Documents/GitHub/Theme3_LabNotebook/R_scripts")
#load the reticulate package
library(reticulate)
use_condaenv("/Users/username/opt/homebrew/anaconda3/envs/myCondaEnvironment")
use_condaenv("/Users/username/opt/homebrew/anaconda3/envs/myCondaEnvironment", required =T)
# set my working directory
#setwd("~/Documents/GitHub/Theme3_LabNotebook/R_scripts")
#load the reticulate package
library(reticulate)
use_condaenv("/Users/pburnham/opt/homebrew/anaconda3/envs/myCondaEnvironment", required =T)
# set my working directory
#setwd("~/Documents/GitHub/Theme3_LabNotebook/R_scripts")
#load the reticulate package
library(reticulate)
use_condaenv("/opt/homebrew/anaconda3/envs/myCondaEnvironment", required =T)
#load the reticulate package
library(reticulate)
use_condaenv("myCondaEnvironment", required =T)
reticulate::repl_python()
#import numpy as np
#use_condaenv("myCondaEnvironment", required =T)
use_python_version(3.9, required = T)
#use_condaenv("myCondaEnvironment", required =T)
use_python_version(version="3.9", required = T)
#use_condaenv("myCondaEnvironment", required =T)
use_python_version(version="3.8", required = T)
#use_condaenv("myCondaEnvironment", required =T)
use_python_version(version="3.9.5", required = T)
conda_list()
#use_condaenv("myCondaEnvironment", required =T)
use_python(python = "/opt/anaconda3/envs/myCondaEnvironment/bin/python", required = T)
reticulate::repl_python()
#import numpy as np
reticulate::repl_python()
