import platform
# make sure python 3.7 is laoded
print(platform.python_version())
# make sure python 3.7 is laoded
print(platform.python_version())
# set my absolute directory path for where the data are
direc ="/Users/pburnham/Documents/geospatialData/"
# create a list of all raster files that end in .tif
dataPaths = glob.glob(direc+"*.tif")
# call the raster align function 4326 vs 3857 nonVal SRS resolution
alignedRasters = raster_align(rastNames=dataPaths, noneVal=-1)
import platform
print(platform.python_version())
import glob
import re
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.pyplot as plt
import netCDF4 as nc
from rasterAlign import *
import rasterio
# set my absolute directory path for where the data are
direc ="/Users/pburnham/Documents/geospatialData/"
# create a list of all raster files that end in .tif
dataPaths = glob.glob(direc+"*.tif")
# call the raster align function 4326 vs 3857 nonVal SRS resolution
alignedRasters = raster_align(rastNames=dataPaths, noneVal=-1)
fn = '/Users/pburnham/Documents/GitHub/Theme3_Burnham_Private/Theme3_PythonProjects/Python37Theme3/test.nc'
ds = nc.Dataset(fn, 'w', format='NETCDF4')
# inmtialize vars by creating dimensions
time = ds.createDimension('time', None)
lat = ds.createDimension('lat', 10)
lon = ds.createDimension('lon', 10)
# create variables
times = ds.createVariable('time', 'f4', ('time',))
lats = ds.createVariable('lat', 'f4', ('lat',))
lons = ds.createVariable('lon', 'f4', ('lon',))
value = ds.createVariable('value', 'f4', ('time', 'lat', 'lon',))
value.units = 'Unknown'
value[0, :, :] = np.random.uniform(0, 100, size=(10, 10))  # unifrom random values
#print('var size after adding first data', value.shape)
xval = np.linspace(0.5, 5.0, 10)
yval = np.linspace(0.5, 5.0, 10)
value[1, :, :] = np.array(xval.reshape(-1, 1) + yval)  # linear gradient values
print(ds)
lat = ds.variables['lat'][:] # matrix of lats
lon = ds.variables['lon'][:]# matrix of longs
time = ds.variables['time'][:] # list of codes for 365 days
print(time)
print(np.mean(time))
val = ds.variables['value'][:]
print(val)
print(val[1,:,:])
print(val[0,:,:])
print(val[0,0,:])
print(lat) n# print the lat
print(lat) # print the lat
# import numpy and check to ensure the version of python is correct for my conda env.
import numpy as np
import platform
print(platform.python_version())
# a 150 x 2 array of random numbers bound 0 to 1
randArray = np.random.rand(150,2)
print(randArray[0:3,])
import matplotlib.pyplot as plt
from numpy.polynomial.polynomial import polyfit
# assign names x and y
x = r.randArray_R["X1"]
y =r.randArray_R["X2"]
# plot the values in the dictionary
plt.scatter(x, y)
plt.xlabel('X')
plt.ylabel('Y')
plt.show()
import netCDF4 as nc
import numpy as np
# locate local path to .nc4 test file
fn = "/Users/pburnham/Documents/GitHub/Theme3_LabNotebook/R_scripts/data/prcp_1980.nc4"
# create netcdf data set
ds = nc.Dataset(fn)
# Pull precipitation data out of the netcd4 object
prcp=ds['prcp'][:]
# print a subset of the masked array
print(prcp[0, 500:505, 200:205])
# basic summary stats
print(np.max(prcp))
print(np.min(prcp))
print(np.mean(prcp))
from sqlalchemy import create_engine
from sqlalchemy import create_engine
from cubes.tutorial.sql import create_table_from_csv
from cubes.tutorial.sql import create_table_from_csv
from cubes import Workspace
#begin the sqlite environment
engine = create_engine('sqlite:///data.sqlite')
# create the table and fields
create_table_from_csv(engine,
"/Users/pburnham/Documents/GitHub/Theme3_LabNotebook/R_scripts/data/IBRD_Balance_Sheet__FY2010.csv",
table_name="ibrd_balance",
fields=[
("category", "string"),
("category_label", "string"),
("subcategory", "string"),
("subcategory_label", "string"),
("line_item", "string"),
("year", "integer"),
("amount", "integer")],
create_id=True
)
# initiate the workspace
workspace = Workspace()
workspace.register_default_store("sql", url="sqlite:///data.sqlite")
# import the model as a .json file
workspace.import_model("tutorial_model.json")
# start up the browser
browser = workspace.browser("ibrd_balance")
# use the aggregate function to get an aggregation for the whole cube
result = browser.aggregate()
# print the results for record counts and amount sum
print(result.summary["record_count"])
print(result.summary["amount_sum"])
# this function call doesn't work. This is due to a lack of modernization in cubes
import glob
import numpy as np
import h5py
import matplotlib.pyplot as plt
import netCDF4 as nc
import csv
import os
os.environ["PROJ_LIB"] = r'C:\Users\pburnham\Anaconda3\envs\env\Library\share (location of epsg)'
#os.environ["PROJ_LIB"] = '/opt/anaconda3/pkgs/proj4-5.2.0-h6de7cb9_1006/share/proj/epsg'
from mpl_toolkits.basemap import Basemap
# set my absolute directory path for where the data are
direc ="/Users/pburnham/Documents/GitHub/Theme3_LabNotebook/R_scripts/data/dayLength/"
# create a list of all .nc4 files in my data folder that are day length data
dataPaths = glob.glob(direc+"dayl*.nc4")
# make sure paths look good
print(dataPaths)
# check out how they are read in (its a list of three paths)
print(type(dataPaths))
# in this case, time is the number of files as each .nc4 file is a year
time = len(dataPaths) # time dimension (three times: 1980-1982 inclusive)
# initialize a list to store files in during the loop
myDataList = [None] * time
# create list of netcdf data sets
for t in range(0, time):
myDataList[t] = nc.Dataset(dataPaths[t])
# these commands print the x and y dimensions for the data sets
#lat = len(ds.dimensions['x'])
# base projection of a map
map = Basemap(projection='merc',llcrnrlon=-165.,llcrnrlat=0.,urcrnrlon=-50.,urcrnrlat=70.,resolution='i')
# add map layers/boarders
map.drawcoastlines() # draws coast lines
map.drawstates() # draws states
map.drawcountries() # draws country bourders
map.drawlsmask(land_color='Linen', ocean_color='#CCFFFF') # pick map colors
map.drawcounties() # draw county lines
# add parallels and meridians
parallels = np.arange(0,90,20.) # between 90 and 20 ever 20 degrees
meridians = np.arange(-180,180,20.) # between -180 and 180 every 20 degrees
# add them to the map
map.drawparallels(parallels,labels=[1,0,0,0],fontsize=10)
map.drawmeridians(meridians,labels=[0,0,0,1],fontsize=10)
plt.show()
print(myDataList[0])
# exploring the values of these various dimensions
lat = myDataList[0].variables['lat'][:] # matrix of lats
lon = myDataList[0].variables['lon'][:]# matrix of longs
time = myDataList[0].variables['time'][:] # list of codes for 365 days
dayl = myDataList[0].variables['dayl'][:] # this is a list of matrices one for each day of the year
print(lat)
print(time)
print(dayl)
print(dayl[1])
print(dayl[1,1,1])
import platform
# make sure python 3.7 is laoded
print(platform.python_version())
import glob
import re
import numpy as np
import matplotlib.pyplot as plt
import netCDF4 as nc
from rasterAlign import *
import rasterio
# set my absolute directory path for where the data are
direc ="/Users/pburnham/Documents/geospatialData/"
# create a list of all raster files that end in .tif
dataPaths = glob.glob(direc+"*.tif")
# call the raster align function 4326 vs 3857 nonVal SRS resolution
alignedRasters = raster_align(rastNames=dataPaths, noneVal=-1)
fn = '/Users/pburnham/Documents/GitHub/Theme3_Burnham_Private/Theme3_PythonProjects/Python37Theme3/test.nc'
ds = nc.Dataset(fn, 'w', format='NETCDF4')
# inmtialize vars by creating dimensions
time = ds.createDimension('time', None) # no time var in this case
lat = ds.createDimension('lat', 10)
lon = ds.createDimension('lon', 10)
# create variables in the data set
times = ds.createVariable('time', 'f4', ('time',))
lats = ds.createVariable('lat', 'f4', ('lat',))
lons = ds.createVariable('lon', 'f4', ('lon',))
# initialize file
fn = '/Users/pburnham/Documents/GitHub/Theme3_Burnham_Private/Theme3_PythonProjects/Python37Theme3/test.nc'
ds = nc.Dataset(fn, 'w', format='NETCDF4')
# inmtialize vars by creating dimensions
time = ds.createDimension('time', None) # no time var in this case
import platform
# make sure python 3.7 is laoded
import glob
import re
import numpy as np
import matplotlib.pyplot as plt
import netCDF4 as nc
from rasterAlign import *
import rasterio
# set my absolute directory path for where the data are
direc ="/Users/pburnham/Documents/geospatialData/"
# create a list of all raster files that end in .tif
dataPaths = glob.glob(direc+"*.tif")
# call the raster align function 4326 vs 3857 nonVal SRS resolution
alignedRasters = raster_align(rastNames=dataPaths, noneVal=-1)
# initialize file
fn = '/Users/pburnham/Documents/GitHub/Theme3_Burnham_Private/Theme3_PythonProjects/Python37Theme3/test.nc'
ds = nc.Dataset(fn, 'w', format='NETCDF4')
ds = nc.Dataset(fn, 'w', format='NETCDF4')
# inmtialize vars by creating dimensions
time = ds.createDimension('time', None) # no time var in this case
lat = ds.createDimension('lat', 10)
lon = ds.createDimension('lon', 10)
# create variables in the data set
times = ds.createVariable('time', 'f4', ('time',))
lats = ds.createVariable('lat', 'f4', ('lat',))
lons = ds.createVariable('lon', 'f4', ('lon',))
value = ds.createVariable('value', 'f4', ('time', 'lat', 'lon',))
value.units = 'My Units'
# create the main varaibles
value[0, :, :] = np.random.uniform(0, 100, size=(10, 10))  # unifrom random values
#print('var size after adding first data', value.shape)
xval = np.linspace(0.5, 5.0, 10)
yval = np.linspace(0.5, 5.0, 10)
value[1, :, :] = np.array(xval.reshape(-1, 1) + yval)  # linear gradient values
print(ds)
lat = ds.variables['lat'][:] # matrix of lats
lon = ds.variables['lon'][:]# matrix of longs
time = ds.variables['time'][:] # list of codes for 365 days
val = ds.variables['value'][:]
print(val[0,:,:]) # print the values
print(lat) # print the lat
ds.variables['lat'][:] = xval # matrix of lats
print(lat) # print the lat
print(np.max(lat)) # print the lat
xval = np.linspace(0.5, 5.0, 10)
ds.variables['lat'] = xval # matrix of lats
ds.variables['lat'][:] = xval # matrix of lats
lat = ds.variables['lat'][:]
print(lat) # print the lat
ds.variables['lon'][:] = yval # add long vals
# write out data objects
lat = ds.variables['lat'][:]
lon = ds.variables['lon'][:]# matrix of longs
time = ds.variables['time'][:] # list of codes for 365 days
val = ds.variables['value'][:]
import platform
# make sure python 3.7 is laoded
print(platform.python_version())
import glob
import re
import numpy as np
import matplotlib.pyplot as plt
import netCDF4 as nc
from rasterAlign import *
import rasterio
# set my absolute directory path for where the data are
direc ="/Users/pburnham/Documents/geospatialData/"
# create a list of all raster files that end in .tif
dataPaths = glob.glob(direc+"*.tif")
# call the raster align function 4326 vs 3857 nonVal SRS resolution
alignedRasters = raster_align(rastNames=dataPaths, noneVal=-1)
