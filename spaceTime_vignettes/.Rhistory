gamma = 0.001,
alpha = 0.001,
theta = 0.01,
mu = 0.0001,
N_g = 10000,
N_w = 10000,
sigma_g = 0.1,
sigma_w = 0.1,
d_i = 0.1,
d_s = 0.1,
b_s = 0.01
)
# model time steps
times <- seq(0, 200, by = 1)
# solve them
out <- ode(y = init, times = times, func = ranaMod, parms = parameters)
# data frame
out <- as.data.frame(out)
# Delete time variable
out$time <- NULL
# Show data
head(out, 10)
# starting conditions
init <- c(P_s = 1000000,
P_i = 100,
G = 1,
W = 1
)
# parameters
parameters <- c(
beta_c = 0.01,
beta_n = 0.01,
gamma = 0.001,
alpha = 0.001,
theta = 0.01,
mu = 0.0001,
N_g = 10000,
N_w = 10000,
sigma_g = 0.1,
sigma_w = 0.1,
d_i = 0.1,
d_s = 0.1,
b_s = 0.01
)
# model time steps
times <- seq(0, 200, by = 1)
# solve them
out <- ode(y = init, times = times, func = ranaMod, parms = parameters)
# data frame
out <- as.data.frame(out)
# Delete time variable
out$time <- NULL
# Show data
head(out, 10)
## Create an SIR function
ranaMod <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dS <- -(theta * W * P_s) + (b_s * P_s) - (d_s * P_s)
dI <- (theta * W * P_s) - (d_i * P_i)
dW <- (gamma * G * N_w) + (alpha * P_i * N_w) - (sigma_w * W)
dG <- (mu * W * (N_g - G)) - (sigma_g * G)
#dS <- -(beta_c * P_s) - (beta_n * P_s) - (theta * W * P_s) + (b_s * P_s) - (d_s * P_s)
#dI <- ((beta_c * P_s) + (beta_n * P_s) + (theta * W * P_s)) - (d_i * P_i)
#dW <- (gamma * G * N_w) + (alpha * P_i * N_w) - (sigma_w * W)
#dG <- (mu * W * (N_g - G)) - (sigma_g * G)
return(list(c(dS, dI, dW, dG)))
})
}
# starting conditions
init <- c(P_s = 1000000,
P_i = 100,
G = 1,
W = 1
)
# parameters
parameters <- c(
#beta_c = 0.01,
#beta_n = 0.01,
gamma = 0.001,
alpha = 0.001,
theta = 0.01,
mu = 0.0001,
N_g = 10000,
N_w = 10000,
sigma_g = 0.1,
sigma_w = 0.1,
d_i = 0.1,
d_s = 0.1,
b_s = 0.01
)
# model time steps
times <- seq(0, 200, by = 1)
# solve them
out <- ode(y = init, times = times, func = ranaMod, parms = parameters)
# data frame
out <- as.data.frame(out)
# Delete time variable
out$time <- NULL
# Show data
head(out, 10)
# starting conditions
init <- c(P_s = 1000000,
P_i = 100,
G = 1,
W = 1
)
# parameters
parameters <- c(
#beta_c = 0.01,
#beta_n = 0.01,
gamma = 0.001,
alpha = 0.001,
theta = 0.01,
mu = 0.0001,
N_g = 100,
N_w = 100,
sigma_g = 0.1,
sigma_w = 0.1,
d_i = 0.1,
d_s = 0.1,
b_s = 0.01
)
# model time steps
times <- seq(0, 200, by = 1)
# solve them
out <- ode(y = init, times = times, func = ranaMod, parms = parameters)
# data frame
out <- as.data.frame(out)
# Delete time variable
out$time <- NULL
# Show data
head(out, 10)
matplot(x = times, y = out, type = "l",
xlab = "Time", ylab = "Susceptible and Recovered", main = "SIR Model",
lwd = 1, lty = 1, bty = "l", col = 1:4)
matplot(y = out, type = "l",
xlab = "Time", ylab = "Susceptible and Recovered", main = "SIR Model",
lwd = 1, lty = 1, bty = "l", col = 1:4)
# parameters
parameters <- c(
#beta_c = 0.01,
#beta_n = 0.01,
gamma = 0.001,
alpha = 0.001,
theta = 0.01,
mu = 0.001,
N_g = 100,
N_w = 100,
sigma_g = 0.1,
sigma_w = 0.1,
d_i = 0.1,
d_s = 0.1,
b_s = 0.01
)
# model time steps
times <- seq(0, 200, by = 1)
# solve them
out <- ode(y = init, times = times, func = ranaMod, parms = parameters)
# data frame
out <- as.data.frame(out)
# Delete time variable
out$time <- NULL
# Show data
head(out, 10)
## Load deSolve package
library(deSolve)
## Create an SIR function
ranaMod <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dS <- -(theta * W * P_s) + (b_s * P_s) - (d_s * P_s)
dI <- (theta * W * P_s) - (d_i * P_i)
dW <- (gamma * G * N_w) + (alpha * P_i * N_w) - (sigma_w * W)
dG <- (mu * W * (N_g - G)) - (sigma_g * G)
#dS <- -(beta_c * P_s) - (beta_n * P_s) - (theta * W * P_s) + (b_s * P_s) - (d_s * P_s)
#dI <- ((beta_c * P_s) + (beta_n * P_s) + (theta * W * P_s)) - (d_i * P_i)
#dW <- (gamma * G * N_w) + (alpha * P_i * N_w) - (sigma_w * W)
#dG <- (mu * W * (N_g - G)) - (sigma_g * G)
return(list(c(dS, dI, dW, dG)))
})
}
# starting conditions
init <- c(P_s = 10000,
P_i = 100,
G = 46,
W = 13
)
# parameters
parameters <- c(
#beta_c = 0.01,
#beta_n = 0.01,
gamma = 0.001,
alpha = 0.001,
theta = 0.01,
mu = 0.001,
N_g = 194,
N_w = 39,
sigma_g = 0.1,
sigma_w = 0.1,
d_i = 0.1,
d_s = 0.1,
b_s = 0.01
)
# model time steps
times <- seq(0, 200, by = 1)
# solve them
out <- ode(y = init, times = times, func = ranaMod, parms = parameters)
# data frame
out <- as.data.frame(out)
# Delete time variable
out$time <- NULL
# Show data
head(out, 10)
plot(out$P_s)
matplot(y = out, type = "l",
xlab = "Time", ylab = "Susceptible and Recovered", main = "SIR Model",
lwd = 1, lty = 1, bty = "l", col = 1:4)
legend(x=100,y=800,
c("Susceptable",
"Infected",
"Gease",
"Water"),
pch=19,
col=1:2,
bty="n",
bg="white")
## Create an SIR function
ranaMod <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dS <- -(theta * W * P_s) + (b_s * P_s) - (d_s * P_s)
dI <- (theta * W * P_s) - (d_i * P_i)
dW <- (gamma * G * N_w) + (alpha * P_i * N_w) - (sigma_w * W)
dG <- (mu * W * (N_g - G)) - (sigma_g * G)
#dS <- -(beta_c * P_s) - (beta_n * P_s) - (theta * W * P_s) + (b_s * P_s) - (d_s * P_s)
#dI <- ((beta_c * P_s) + (beta_n * P_s) + (theta * W * P_s)) - (d_i * P_i)
#dW <- (gamma * G * N_w) + (alpha * P_i * N_w) - (sigma_w * W)
#dG <- (mu * W * (N_g - G)) - (sigma_g * G)
return(list(c(dS, dI, dW, dG)))
})
}
# starting conditions
init <- c(P_s = 10000,
P_i = 100,
G = 46,
W = 13
)
# parameters
parameters <- c(
#beta_c = 0.01,
#beta_n = 0.01,
gamma = 0.001,
alpha = 0.001,
theta = 0.45,
mu = 0.001,
N_g = 194,
N_w = 39,
sigma_g = 0.1,
sigma_w = 0.1,
d_i = 0.1,
d_s = 0.1,
b_s = 0.01
)
# model time steps
times <- seq(0, 200, by = 1)
# solve them
out <- ode(y = init, times = times, func = ranaMod, parms = parameters)
# data frame
out <- as.data.frame(out)
# starting conditions
init <- c(P_s = 100,
P_i = 10,
G = 46,
W = 13
)
# parameters
parameters <- c(
#beta_c = 0.01,
#beta_n = 0.01,
gamma = 0.001,
alpha = 0.001,
theta = 0.45,
mu = 0.001,
N_g = 194,
N_w = 39,
sigma_g = 0.1,
sigma_w = 0.1,
d_i = 0.1,
d_s = 0.1,
b_s = 0.01
)
# model time steps
times <- seq(0, 200, by = 1)
# solve them
out <- ode(y = init, times = times, func = ranaMod, parms = parameters)
# data frame
out <- as.data.frame(out)
# parameters
parameters <- c(
#beta_c = 0.01,
#beta_n = 0.01,
gamma = 0.001,
alpha = 0.001,
theta = 0.45,
mu = 0.001,
N_g = 194,
N_w = 39,
sigma_g = 0.1,
sigma_w = 0.1,
d_i = 0.2,
d_s = 0.1,
b_s = 0.01
)
# model time steps
times <- seq(0, 200, by = 1)
# solve them
out <- ode(y = init, times = times, func = ranaMod, parms = parameters)
# data frame
out <- as.data.frame(out)
# Delete time variable
out$time <- NULL
# Show data
head(out, 10)
plot(out$P_s)
matplot(y = out, type = "l",
xlab = "Time", ylab = "Susceptible and Recovered", main = "SIR Model",
lwd = 1, lty = 1, bty = "l", col = 1:4)
## Create an SIR function
ranaMod <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dS <- -(theta * W * P_s) - (d_s * P_s)
dI <- (theta * W * P_s) - (d_i * P_i)
dW <- (gamma * G * N_w) + (alpha * P_i * N_w) - (sigma_w * W)
dG <- (mu * W * (N_g - G)) - (sigma_g * G)
#dS <- -(beta_c * P_s) - (beta_n * P_s) - (theta * W * P_s) + (b_s * P_s) - (d_s * P_s)
#dI <- ((beta_c * P_s) + (beta_n * P_s) + (theta * W * P_s)) - (d_i * P_i)
#dW <- (gamma * G * N_w) + (alpha * P_i * N_w) - (sigma_w * W)
#dG <- (mu * W * (N_g - G)) - (sigma_g * G)
return(list(c(dS, dI, dW, dG)))
})
}
# starting conditions
init <- c(P_s = 100,
P_i = 10,
G = 46,
W = 13
)
# parameters
parameters <- c(
#beta_c = 0.01,
#beta_n = 0.01,
gamma = 0.001,
alpha = 0.001,
theta = 0.45,
mu = 0.001,
N_g = 194,
N_w = 39,
sigma_g = 0.1,
sigma_w = 0.1,
d_i = 0.2,
d_s = 0.1
#b_s = 0.01
)
# model time steps
times <- seq(0, 200, by = 1)
# solve them
out <- ode(y = init, times = times, func = ranaMod, parms = parameters)
# data frame
out <- as.data.frame(out)
## Create an SIR function
ranaMod <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dS <- -(theta * W * P_s)# - (d_s * P_s)
dI <- (theta * W * P_s)# - (d_i * P_i)
dW <- (gamma * G * N_w) + (alpha * P_i * N_w)# - (sigma_w * W)
dG <- (mu * W * (N_g - G))# - (sigma_g * G)
#dS <- -(beta_c * P_s) - (beta_n * P_s) - (theta * W * P_s) + (b_s * P_s) - (d_s * P_s)
#dI <- ((beta_c * P_s) + (beta_n * P_s) + (theta * W * P_s)) - (d_i * P_i)
#dW <- (gamma * G * N_w) + (alpha * P_i * N_w) - (sigma_w * W)
#dG <- (mu * W * (N_g - G)) - (sigma_g * G)
return(list(c(dS, dI, dW, dG)))
})
}
# starting conditions
init <- c(P_s = 100,
P_i = 10,
G = 46,
W = 13
)
# parameters
parameters <- c(
#beta_c = 0.01,
#beta_n = 0.01,
gamma = 0.001,
alpha = 0.001,
theta = 0.45,
mu = 0.001,
N_g = 194,
N_w = 39,
sigma_g = 0.1,
sigma_w = 0.1,
d_i = 0.2,
d_s = 0.1
#b_s = 0.01
)
# model time steps
times <- seq(0, 200, by = 1)
# solve them
out <- ode(y = init, times = times, func = ranaMod, parms = parameters)
# data frame
out <- as.data.frame(out)
# Delete time variable
out$time <- NULL
# Show data
head(out, 10)
plot(out$P_s)
matplot(y = out, type = "l",
xlab = "Time", ylab = "Susceptible and Recovered", main = "SIR Model",
lwd = 1, lty = 1, bty = "l", col = 1:4)
matplot(y = out, type = "l",
xlab = "Time", ylab = "Susceptible and Recovered", main = "SIR Model",
lwd = 1, lty = 1, bty = "l", col = 1:4)
legend(x=100,y=800,
c("Susceptable",
"Infected",
"Gease",
"Water"),
pch=19,
col=1:2,
bty="n",
bg="white")
## Create an SIR function
ranaMod <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dS <- -(theta * (W/39) * P_s)# - (d_s * P_s)
dI <- (theta * (W/39) * P_s)# - (d_i * P_i)
dW <- (gamma * G * N_w) + (alpha * P_i * N_w)# - (sigma_w * W)
dG <- (mu * W * (N_g - G))# - (sigma_g * G)
#dS <- -(beta_c * P_s) - (beta_n * P_s) - (theta * W * P_s) + (b_s * P_s) - (d_s * P_s)
#dI <- ((beta_c * P_s) + (beta_n * P_s) + (theta * W * P_s)) - (d_i * P_i)
#dW <- (gamma * G * N_w) + (alpha * P_i * N_w) - (sigma_w * W)
#dG <- (mu * W * (N_g - G)) - (sigma_g * G)
return(list(c(dS, dI, dW, dG)))
})
}
# starting conditions
init <- c(P_s = 100,
P_i = 10,
G = 46,
W = 13
)
# parameters
parameters <- c(
#beta_c = 0.01,
#beta_n = 0.01,
gamma = 0.001,
alpha = 0.001,
theta = 0.45,
mu = 0.001,
N_g = 194,
N_w = 39,
sigma_g = 0.1,
sigma_w = 0.1,
d_i = 0.2,
d_s = 0.1
#b_s = 0.01
)
# model time steps
times <- seq(0, 200, by = 1)
# solve them
out <- ode(y = init, times = times, func = ranaMod, parms = parameters)
# data frame
out <- as.data.frame(out)
# Delete time variable
out$time <- NULL
# Show data
head(out, 10)
matplot(y = out, type = "l",
xlab = "Time", ylab = "Susceptible and Recovered", main = "SIR Model",
lwd = 1, lty = 1, bty = "l", col = 1:4)
plot(out$W)
#load the reticulate package
library(reticulate)
# activate my previously created conda environment
use_condaenv(condaenv = "barra_python", conda = "auto", required = FALSE)
reticulate::repl_python()
import platform
reticulate::repl_python()
# make sure python 3.9 is loaded
reticulate::repl_python()
print(platform.python_version())
update.packages("reticulate")
update.packages("reticulate")
#load the reticulate package
library(reticulate)
# activate my previously created conda environment
use_condaenv(condaenv = "barra_python", conda = "auto", required = FALSE)
Make sure my 3.9 conda env is loaded
```{python}
reticulate::repl_python()
import platform
reticulate::repl_python()
# make sure python 3.9 is loaded
reticulate::repl_python()
print(platform.python_version())
#load the reticulate package
library(reticulate)
install.packages(:"reticulate")
install.packages("reticulate")
#load the reticulate package
library(reticulate)
# activate my previously created conda environment
use_condaenv(condaenv = "barra_python", conda = "auto", required = FALSE)
reticulate::repl_python()
